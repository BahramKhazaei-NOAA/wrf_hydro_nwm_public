module read_ihop

contains

!-------------------------------------------------------------------------------
  subroutine readland_ihop(dir, ix, jx, vegtyp, soltyp, terrain, latitude,longitude)
!-------------------------------------------------------------------------------
    implicit none
    character(len=*), intent(in) :: dir
    integer, intent(in) :: ix, jx
    integer, dimension(ix,jx), intent(out) :: vegtyp, soltyp
    real, dimension(ix,jx), intent(out) :: terrain, latitude, longitude

    integer, parameter :: readland_unit = 30

    
    integer, parameter :: zheader = 2
    integer, parameter :: posheader = 5
    integer, parameter :: luheader = 2
    integer, parameter :: soilheader = 2
    character(len=256) :: filename

    integer :: i, ierr
    real :: lat, lon

!
!  First file:  Terrain elevation data
!
    write(*, '(/," Reading terrain elevation of sites:")')
    filename=trim(dir)//"/IHOPelev"
    OPEN(readland_unit, FILE=trim(filename), FORM="FORMATTED", STATUS="OLD", &
         ACTION="READ", IOSTAT=ierr)
    if (ierr /= 0) then
       write(*,'("Problem opening file ", A)') trim(filename)
       stop
    endif

    ! Read past header records in the data file
    DO i=1,zheader
       READ (readland_unit, *, IOSTAT=ierr)
       if (ierr /= 0) then
          write(*,'("Problem skipping header in file ", A)') trim(filename)
          stop
       endif
    ENDDO

    ! Read in the terrain data and assign to array TERRAIN
    DO i = 1, ix
       READ (readland_unit, *, IOSTAT=ierr) terrain(i,1)
       if (ierr /= 0) then
          write(*,'("Problem reading data from file ", A)') trim(filename)
          stop
       endif
       write(*,'(6x,"Terrain elevation: ", F10.2)') terrain(i,1)
    ENDDO

    close(readland_unit)

!
!  Second file: Latitudes and Longitudes
!
    write(*, '(/," Reading latitudes and longitude of sites:")')

    filename=trim(dir)//"/IHOPposn"
    OPEN(readland_unit, FILE=trim(filename), FORM="FORMATTED", STATUS="OLD", &
         ACTION="READ", IOSTAT=ierr)
    if (ierr /= 0) then
       write(*,'("Problem opening file ", A)') trim(filename)
       stop
    endif

    ! Read past header records in the data file
    DO i=1, posheader
       READ(readland_unit, *, IOSTAT=ierr)
       if (ierr /= 0) then
          write(*,'("Problem skipping header in file ", A)') trim(filename)
          stop
       endif
    ENDDO

    ! Read in the lat/lon data and assign to arrays LATITUDE, LONGITUDE
    DO i=1, ix
       READ(readland_unit, *, IOSTAT=ierr) lon, lat
       if (ierr /= 0) then
          write(*,'("Problem reading data from file ", A)') trim(filename)
          stop
       endif
       write(*,'(6x,"Read lat/lon (dddmmss.s):",2(1x,F9.1))', advance="NO") lat, lon
       latitude(i,1) = int(lat)/10000
       latitude(i,1) = latitude(i,1) + mod(int(lat)/100, 100) / 60.
       latitude(i,1) = latitude(i,1) + mod(int(lat*10), 1000) / 36000.
       longitude(i,1) = int(lon)/10000
       longitude(i,1) = longitude(i,1) + mod(int(lon)/100, 100) / 60.
       longitude(i,1) = longitude(i,1) + mod(int(lon*10), 1000) / 36000.
       write(*, '(" Converted to", 2(1x,F10.5))') latitude(i,1), longitude(i,1)
    ENDDO
    close(readland_unit)

!
!  Third file:  Vegetation type (i.e., land-use)
!

    write(*, '(/," Reading vegetation category of sites:")')

    filename=trim(dir)//"/IHOPluse"
    OPEN(readland_unit, FILE=trim(filename), FORM="FORMATTED", STATUS="OLD", &
	ACTION="READ", IOSTAT=ierr)
    if (ierr /= 0) then
       write(*,'("Problem opening file ", A)') trim(filename)
       stop
    endif

    ! Read past header records in the data file
    DO i=1, luheader
       READ (readland_unit, *, IOSTAT=ierr)
       if (ierr /= 0) then
          write(*,'("Problem skipping header in file ", A)') trim(filename)
          stop
       endif
    ENDDO

    ! Read in the land use data and assign to array VEGTYP
    DO i=1, ix
       READ (readland_unit, *, IOSTAT=ierr) vegtyp(i,1)
       if (ierr /= 0) then
          write(*,'("Problem reading data from file ", A)') trim(filename)
          stop
       endif
       write(*,'(6x,"Vegetation category: ", I3)') vegtyp(i,1)
    ENDDO

    close(readland_unit)

!
!  Fourth file:  Soil type
!

    write(*, '(/," Reading soil category of sites:")')

    filename=trim(dir)//"/IHOPstyp"
    OPEN(readland_unit, FILE=trim(filename), FORM="FORMATTED", STATUS="OLD", &
         ACTION="READ", IOSTAT=ierr)
    if (ierr /= 0) then
       write(*,'("Problem opening file ", A)') trim(filename)
       stop
    endif

    ! Read past header records in the data file
    DO i=1, soilheader
       READ (readland_unit, *, IOSTAT=ierr)
       if (ierr /= 0) then
          write(*,'("Problem skipping header in file ", A)') trim(filename)
          stop
       endif
    ENDDO

    ! Read in the soil category data and assign to array SOLTYP
    DO i=1, ix
       READ (readland_unit, *, IOSTAT=ierr) soltyp(i,1)
       if (ierr /= 0) then
          write(*,'("Problem reading data from file ", A)') trim(filename)
          stop
       endif
       write(*,'(6x,"Vegetation category: ", I3)') soltyp(i,1)
    ENDDO

    close(readland_unit)
    
!-------------------------------------------------------------------------------
  end subroutine readland_ihop
!-------------------------------------------------------------------------------

!-------------------------------------------------------------------------------
  subroutine readinit_ihop(dir,ix,jx,nsoil,smc,stc,sh2ox,esdx,cmc,t1, snodep)
!-------------------------------------------------------------------------------
    implicit none
    character(len=*), intent(in) :: dir
    integer, intent(in) :: ix, jx, nsoil
    real, dimension(ix,jx,nsoil), intent(out) :: smc, stc, sh2ox
    real, dimension(ix,jx), intent(out) :: esdx, cmc, t1, snodep
    
    character(len=256) :: filename, fmtstr
    integer :: i, j, ierr
    integer, parameter :: nheader = 3, nheader_uds=4
    integer, parameter :: readinit_unit = 30, unit=31
    real :: xdum

    filename=trim(dir)//"/IHOPsoil"
    OPEN(readinit_unit, FILE=trim(filename), FORM="FORMATTED", STATUS="OLD", &
         ACTION="READ", IOSTAT=ierr)
    if (ierr /= 0) then
       write(*,'("Problem opening file ", A)') trim(filename)
       write(*,'("IERR = ", I10)') ierr
       stop " ****** FATAL ERROR IN SUBROUTINE 'READINIT_IHOP'"
    endif

    ! Read past header records in the data file
    write(fmtstr,'("(",I1,"(/))")') nheader-1
    read(readinit_unit,FMT=fmtstr, IOSTAT=ierr)
    if (ierr /= 0) then
       write(*,'("Problem skipping header in file ", A)') trim(filename)
       write(*,'("IERR = ", I10)') ierr
       stop " ****** FATAL ERROR IN SUBROUTINE 'READINIT_IHOP'"
    endif

    ! Read in the soil data and fill arrays SMC, STC
    DO i=1, ix
       READ (readinit_unit, *, IOSTAT=ierr) smc(i,1,2:7), stc(i,1,2:7)
       if (ierr /= 0) then
          write(*,'("Problem reading data from file ", A)') trim(filename)
          write(*,'("IERR = ", I10)') ierr
          stop " ****** FATAL ERROR IN SUBROUTINE 'READINIT_IHOP'"
       endif

       ! Level 1 is assigned the value from level 2
       stc(i,1,1) = stc(i,1,2)
       smc(i,1,1) = smc(i,1,2)
       
       ! Level 8 is assigned the value from level 6
       stc(i,1,8) = stc(i,1,7)
       smc(i,1,8) = smc(i,1,7)

       ! What a hassle.  Get T1 (i.e., Tsfc) from a different file
       write(filename, '(A,"/IHOPUDS",I1)') trim(dir), i
       OPEN(unit, FILE=trim(filename), FORM="FORMATTED", STATUS="OLD", &
            ACTION="READ", IOSTAT=ierr)
       if (ierr /= 0) then
          write(*,'("Problem opening file ", A)') trim(filename)
          write(*,'("IERR = ", I10)') ierr
          stop " ****** FATAL ERROR IN SUBROUTINE 'READINIT_IHOP'"
       endif
       
       ! Read past header records in the data file
       write(fmtstr,'("(",I1,"(/))")') nheader_uds-1
       read(unit,FMT=trim(fmtstr), IOSTAT=ierr)
       if (ierr /= 0) then
          write(*,'("Problem skipping header in file ", A)') trim(filename)
          write(*,'("IERR = ", I10)') ierr
          stop " ****** FATAL ERROR IN SUBROUTINE 'READINIT_IHOP'"
       endif

       ! Read the data record
       read(unit,*,IOSTAT=ierr) (xdum,j=1,22), t1(i,1)
       if (ierr /= 0) then
          write(*,'("Problem reading data record in file ", A)') trim(filename)
          write(*,'("IERR = ", I10)') ierr
          stop " ****** FATAL ERROR IN SUBROUTINE 'READINIT_IHOP'"
       endif
       print*, '      t1 = ', t1(i,1)
       close(unit)
       
    ENDDO

    ! Convert smc from percent(0-100) to fraction(0.0-1.0)
    smc = smc * 1.E-2
    ! Convert temperatures from Celsius to Kelvin
    stc = stc + 273.15
    t1 = t1 + 273.15

    sh2ox = smc
    esdx = 0.0
    cmc = 0.0
    snodep = 0.0

    close(readinit_unit)
    
!-------------------------------------------------------------------------------
  end subroutine readinit_ihop
!-------------------------------------------------------------------------------

!-------------------------------------------------------------------------------
  subroutine readveg_ihop(dir, ix, jx, fpar, lai)
!-------------------------------------------------------------------------------
    implicit none
    character(len=*), intent(in) :: dir
    integer, intent(in) :: ix, jx
    real, dimension(ix,jx), intent(out) :: fpar, lai

    integer :: i, j, ierr
    integer, parameter :: nheader = 4
    integer, parameter :: unit = 30
    character(len=256) :: filename, fmtstr
    integer :: idum
    real :: xdum

    DO i=1, ix
       write(filename, '(A,"/IHOPUDS",I1)') trim(dir),i
       OPEN(unit, FILE=trim(filename), FORM="FORMATTED", STATUS="OLD", &
            ACTION="READ", IOSTAT=ierr)
       if (ierr /= 0) then
          write(*,'("Problem opening file ", A)') trim(filename)
          write(*,'("IERR = ", I10)') ierr
          stop " ****** FATAL ERROR IN SUBROUTINE 'READVEG_IHOP'"
       endif
       
       ! Read past header records in the data file
       write(fmtstr,'("(",I1,"(/))")') nheader-1
       read(unit,FMT=trim(fmtstr), IOSTAT=ierr)
       if (ierr /= 0) then
          write(*,'("Problem skipping header in file ", A)') trim(filename)
          write(*,'("IERR = ", I10)') ierr
          stop " ****** FATAL ERROR IN SUBROUTINE 'READVEG_IHOP'"
       endif

       ! Read the data record
       read(unit,*,IOSTAT=ierr) (xdum,j=1,26), lai(i,1), xdum, fpar(i,1)
       if (ierr /= 0) then
          write(*,'("Problem reading data record in file ", A)') trim(filename)
          write(*,'("IERR = ", I10)') ierr
          stop " ****** FATAL ERROR IN SUBROUTINE 'READVEG_IHOP'"
       endif
       print*, '      lai, fpar = ', lai(i,1), fpar(i,1)
       

       close(unit)
    enddo

    
!-------------------------------------------------------------------------------
  end subroutine readveg_ihop
!-------------------------------------------------------------------------------

!-------------------------------------------------------------------------------
  subroutine readforc_ihop &
       (ix, jx, year, mdt, min, dir, dt, t2, q2, xlong, u, v, pres, short, prcp, &
        lai, fg)
    implicit none
    integer, intent(in) :: ix, jx
    character(len=4), intent(in) :: year
    CHARACTER(len=6), intent(in) :: mdt
    CHARACTER(len=2), intent(in) :: min
    CHARACTER(len=*), intent(in) :: dir
    real, intent(in) :: dt   ! Timestep for LSM integration
    real, dimension(ix,jx), intent(out) :: t2  ! 2-m Air Temperature in Kelvin
    real, dimension(ix,jx), intent(out) :: q2, xlong, u, v
    real, dimension(ix,jx), intent(out) :: pres, short, prcp, lai, fg

    real, dimension(ix,jx) :: ndvi
    integer :: i, j, ierr, iyr, imo, idy, ihms
    integer, parameter :: nheader = 4
    integer, parameter :: unitbase = 130
    character(len=256) :: filename, fmtstr
    real :: xdum, rainacc
    logical :: opened

    character(len=14) :: finddate, readdate ! Dates in the form YYYYMMDDHHmmss
    finddate = year//mdt//min//"00"
    STNLOOP : DO i=1, ix
!       write(filename, '("IHOPdata/IHOPUDS",I1)') i
       write(filename, '(A,"/IHOPUDS",I1)') trim(dir),i
       inquire(file=trim(filename), opened=opened)
       if (.not. opened) then
          OPEN(unitbase+i, FILE=trim(filename), FORM="FORMATTED", STATUS="OLD", &
               ACTION="READ", IOSTAT=ierr)
          if (ierr /= 0) then
             write(*,'("Problem opening file ", A)') trim(filename)
             write(*,'("IERR = ", I10)') ierr
             stop " ****** FATAL ERROR IN SUBROUTINE 'READFORC_IHOP'"
          endif
       
          ! Read past header records in the data file
          write(fmtstr,'("(",I1,"(/))")') nheader-1
          read(unitbase+i,FMT=trim(fmtstr), IOSTAT=ierr)
          if (ierr /= 0) then
             write(*,'("Problem skipping header in file ", A)') trim(filename)
             write(*,'("IERR = ", I10)') ierr
             stop " ****** FATAL ERROR IN SUBROUTINE 'READFORC_IHOP'"
          endif
       endif

       ! Read data records until the dates in the data record match the 
       ! requested dates which come in from the argument list
       TIMELOOP : do
          read(unitbase+i,*,IOSTAT=ierr) (xdum,j=1,5), iyr, imo, idy, ihms, xdum, &
               short(i,1), xlong(i,1), t2(i,1), &
               pres(i,1), q2(i,1), xdum, u(i,1), v(i,1), prcp(i,1), (xdum,j=1,7),   &
               lai(i,1), ndvi(i,1), fg(i,1)
          if (ierr /= 0) then
             write(*,'("Problem reading data record in file ", A)') trim(filename)
             write(*,'("IERR = ", I10)') ierr
             stop " ****** FATAL ERROR IN SUBROUTINE 'READFORC_IHOP'"
          endif
          write(readdate,'(I4.4,2(I2.2),I6.6)') iyr, imo, idy, ihms
          if (readdate < finddate) cycle TIMELOOP
          if (readdate > finddate) then
             print*, 'Date problem for station ', i
             print*, '     Read date '//readdate//' past the desired date '//finddate
             stop
          endif
          ! If we've passed the above two if-tests, we're at the right time.
          exit TIMELOOP
          
       enddo TIMELOOP

    ! Convert T from Celsius to Kelvin
       T2(i,1) = T2(i,1) + 273.15
    ! Convert mixing ratio from g/kg to kg/kg
       Q2(i,1) = Q2(i,1) * 1.E-3
    ! Convert Pressure from mb to Pa
       pres(i,1) = pres(i,1) * 100.
    ! Convert Rainfaill to mm/s
       prcp(i,1) = prcp(i,1) / dt

    enddo STNLOOP

!-------------------------------------------------------------------------------
  end subroutine readforc_ihop
!-------------------------------------------------------------------------------

end module read_ihop

#if defined ( __OldStuff__ )
Subroutine READIHOP(LU  
IMPLICIT NONE
! This program reads each line of data from the nine
! IHOP unified dataset files and stores the values of
! each variable in an array.     
! JG Alfieri, June 29, 2003


! Variable Declarations
! filebase is the non-unique portion of the filename
! filename is the unique filename of each data file

CHARACTER:: filename*35,filebase*30

! i, j, k  are simple counter variables
! ios is the I/O status and is used for error catching

INTEGER:: i,j,k,ios 

! sites is a constant and defines the number of sites
! nrec is the number of iterations to be used in testing 
! headlines is the number of header lines at the start of
! the data file
! soilheadlines, as above for soils properties file
! LUheadlines, as above for Land Use file

INTEGER, PARAMETER:: sites=9, nrec=2353, headlines =4

INTEGER, PARAMETER:: soilheadlines=3, LUheadlines =2

INTEGER, PARAMETER:: posheader=3, zheader=2

! junk is used to store junk data, i.e unneeded data,  as it is read in

REAL:: junk

! The following arrays will store the data for all sites
! for each of the given variables
! RADIATION VARIABLES
! Sdown is incident shortwave radiation
! Ldown is incident longwave radiation
! Rnet is the net radiation 
! PAR is photosynthetic active radiation
! TEMPERATURE VARIABLES
! Tair is the air temperature
! Tsfc is the surface temperature
! MISC ATMOSPHERIC VARIABLES
! AtmP is atmospheric pressure
! MixR is mixing ratio
! WIND VARIABLES
! Windspd is the Windspeed
! Uspd is the U velocity component
! Vspd is the V velocity component
! RAIN VARIABLES
! RainAcc is the rain accumulated
! RainRate is the rate of rainfall
! ENERGY FLUX VARIABLES
! LHF is the latent heat flux
! SHF is the sensible heat flux
! GHF is the ground (soil) heat flux
! LANDUSE VARIABLES
! LU is the USGS Land Use/Land Cover Type
! SOIL VARIABLES
! thetax, where x is an integer 1 to 6, is the SMC at level x
! Tsoilx, where x is an integer 1 to 6, is the soil temperture

! RADIATION VARIABLES
REAL:: Sdown(sites), Ldown(sites), Rnet(sites), PAR(sites)

! TEMPERATURE VARIABLES
REAL:: Tair(sites), Tsfc(sites)

! MISC ATMOSPHERIC VARIABLES
REAL:: AtmP(sites), MixR(sites)

! WIND VARIABLES
REAL:: Windspd(sites), Uspd(sites), Vspd(sites)

! RAIN VARIABLES
REAL:: RainAcc(sites), RainRate(sites)

! ENERGY FLUX VARIABLES
REAL:: LHF(sites), SHF(sites), GHF(sites)
 
! LAND SURFACE VARIABLES
REAL:: LAI(sites), NDVI(sites), Fg(sites)

! SOIL MOISTURE VARIABLES
REAL:: theta1(sites), theta2(sites), theta3(sites), &
	theta4(sites), theta5(sites), theta6(sites)

! SOIL TEMP VARIABLES
REAL:: Tsoil1(sites), Tsoil2(sites), Tsoil3(sites), &
	Tsoil4(sites), Tsoil5(sites), Tsoil6(sites)

! LAND USE VARIABLES
INTEGER:: LU(sites)

! POSITION VARIABLES
REAL:: lat(sites), long(sites), z(sites)

filename="IHOPdata/IHOPelev"
OPEN(UNIT=30, FILE=filename, STATUS="OLD", &
	ACTION="READ", IOSTAT=ios)
DO i=1,zheader
	READ (UNIT=30, *, IOSTAT=ios)
END DO

DO j =1, sites
	READ (UNIT=30, *, IOSTAT=ios) z(j)
END DO

filename="IHOPdata/IHOPposn"
OPEN(UNIT=31, FILE=filename, STATUS="OLD", &
	ACTION="READ", IOSTAT=ios)
DO i=1, posheader
	READ(UNIT=31, *, IOSTAT=ios)
END DO

DO j=1, sites
	READ(UNIT=31, *, IOSTAT=ios) lat(j), long (j)
END DO

! Open And Read In LULC data
! Open the file and assign it to unit 10
filename="IHOPdata/IHOPLULC"
OPEN(UNIT=10, FILE=filename, STATUS="OLD", &
	ACTION="READ", IOSTAT=ios)
! Read pass header rows in the data file
DO i=1, LUheadlines
	READ (UNIT=10, *, IOSTAT=ios)
END DO
! Read in the land use data and assign to array LU
DO j=1, sites
	READ (UNIT=10, *, IOSTAT=ios) LU(j)
END DO

! Read Soil Properties Data
! Open soil properties file and assign to unit 20
filename="IHOPdata/IHOPsoil"
OPEN(UNIT=20, FILE=filename, STATUS="OLD", &
	ACTION="READ", IOSTAT=ios)
! Read passed header rows of data file
DO i=1,soilheadlines
	READ (UNIT=20, *, IOSTAT=ios)
END DO
! Read in the soil properties data and assign it to the appropriate array
DO i= 1,sites
	READ (UNIT=20, *, IOSTAT=ios) theta1(i), theta2(i), &
		theta3(i), theta4(i), theta5(i), theta6 (i), &
		Tsoil1(i), Tsoil2(i), Tsoil3(i), Tsoil4(i), &
   		Tsoil5(i), Tsoil6(i)
END DO

! Open Atmospheric Data Files To Be Read 

filebase="IHOPdata/IHOPUDS"

DO i=1,sites
	filename=filebase//ACHAR(48+i)
	OPEN(UNIT=10+i, FILE=filename, STATUS="OLD", &
		 ACTION="READ",IOSTAT=ios)

END DO


! Read Passed The Header Information In The Data Files (Lines 1-4)

DO i=1, sites
	DO j=1,headlines
		READ (UNIT=10+i, *, IOSTAT=ios)
	END DO
END DO 

! Reads The Lines of Data And Displays Them To The Screen
DO i=1,nrec
	DO j=1,sites
		READ (UNIT=10+j, *, IOSTAT=ios) junk, junk, junk, &
			junk, junk, junk, junk, junk, junk, &
			junk, Sdown(j),Ldown(j), &
			Tair(j), AtmP(j), MixR(j), Windspd(j), &
			Uspd(j), Vspd(j), RainAcc(j),RainRate(j), &
			Rnet(j), PAR(j), Tsfc(j), LHF(j), SHF(j), &
			GHF(j), LAI(j),NDVI(j), Fg(j) 
                !KWM FG is FPAR
                !KWM Tair is T2   (we need K)
                !    MixR is Q2   (we need kg/kg)
                !    Ldown is XLONG 
                !    Uspd, Vspd are U, V (m/s)
                !    AtmP  is PRES (we need Pa)
                !    Sdown is SHORT (w/m2)
                !    Take (rainAcc / dt) to get rainrate in mm/s
	END DO

END DO
 
END PROGRAM filereader


#endif
