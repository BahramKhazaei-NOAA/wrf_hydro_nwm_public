!program drive rtland
! this program is called by wrf model for coupling with the RTLAND
!
!    call drive_rtland(ite-its+1,jte-jts+1, dtbl& 
!          t_phy(its:ite,1,jts:jte), &
!          qv_curr(its:ite,1,jts:jte),         &
!          u_phy(its:ite,1,jts:jte),            &
!          v_phy(its:ite,1,jts:jte),            &
!          p8w(its:ite,1,jts:jte),         &
!          GLW(its:ite,jts:jte)*EMISS(its:ite,jts:jte), & !  XLONG
!          GSW(its:ite,jts:jte)/(1.0-albedo(its:ite,jts:jte)), & ! SHORT
!          rainbl(its:ite,jts:jte)/dtbl               , &    ! PRCP1
!          SNOW(its:ite,jts:jte)*0.001 ,         & ! WEASD
!          SNOWH(its:ite,jts:jte),               & ! SNODEP
!          tsk(its:ite,jts:jte), &
!          hfx(its:ite,jts:jte), &
!          qfx(its:ite,jts:jte), &
!          qsfc(its:ite,jts:jte), &
!          GRDFLX(its:ite,jts:jte), &
!          snowc(its:ite,jts:jte), &
!          canwat(its:ite,jts:jte), &
!          znt(its:ite,jts:jte) &
!added
!          LH(its:ite,jts:jte),&
!          CHS2(its:ite,jts:jte),&
!          CQS2(its:ite,jts:jte),&
!          XICE(its:ite,jts:jte),&
!          XLAND(its:ite,jts:jte), &
!          TSLB(its:ite,:,jts:jte), &
!          SMOIS(its:ite,:,jts:jte),&
!          SH2O(its:ite,:,jts:jte) &
!       )

     subroutine drive_rtland(wrf_ix,wrf_jx,cpl_land_dt, & 
           wrf_T2, &
           wrf_Q2X, &
           wrf_U, &
           wrf_V, &
           wrf_PRES, &
           wrf_XLONG, &
           wrf_SHORT, &
           wrf_PRCP1, &
           wrf_WEASD, &
           wrf_SNODEP, &
           wrf_T1, &     ! begin output flux
           wrf_HX, &
           wrf_ETAKIN,&
           wrf_QSFC,&
           wrf_SOILHX,&
           wrf_SNOWC,&
           wrf_CMC,&
           wrf_ZNT,  &
           wrf_z0,  &
           wrf_emiss, &
           wrf_albedo,  &
!added
            LH,CHS2,CQS2,XICE,XLAND, &
            TSLB,SMOIS,wrf_SH2O,      &
            wrf_ZLVL,wrf_ims,wrf_jms,wrf_tmn, &
            ivgtyp,VEGFRA )

        use  module_rtland
        implicit none
 
        integer init_flag
        save init_flag
        real t1max,t1min

        integer ntime, wrf_ix,wrf_jx
        real cpl_land_dt
        real,dimension(wrf_ix,wrf_jx):: &
           wrf_T2, &
           wrf_Q2X, &
           wrf_U, &
           wrf_V, &
           wrf_PRES, &
           wrf_XLONG, &
           wrf_SHORT, &
           wrf_PRCP1, &
           wrf_WEASD, &
           wrf_SNODEP, &
           wrf_emiss, &
           wrf_albedo, wrf_tmn,VEGFRA

!output flux and state variable
        real,dimension(wrf_ix,wrf_jx):: &
           wrf_T1, &     
           wrf_HX, &
           wrf_ETAKIN,&
           wrf_QSFC,&
           wrf_SOILHX,&
           wrf_SNOWC,&
           wrf_CMC,&
           wrf_ZNT, wrf_ZLVL, wrf_z0
        integer  wrf_ims,wrf_jms

        real,dimension(wrf_ix,wrf_jx):: &
            LH,CHS2,CQS2,XICE,XLAND
        real,dimension(wrf_ix,4,wrf_jx):: &
            TSLB,SMOIS,wrf_SH2O
        integer,dimension(wrf_ix,wrf_jx):: ivgtyp
        real time1, time2

#ifdef COUPLED
        if(.not. initialized) then
           call rtland_init(1)
             initialized = .true.
        endif
#endif

! pass initial data (initilization the land model)
  if(init_flag .ne. 99) then
     write(6,*) "important: initilization of the land model"
     call flush(6)
     init_flag = 99
     
     call to8layer(SMOIS,SMC,wrf_ix,wrf_jx)

     call to8layer(TSLB,STC,wrf_ix,wrf_jx)
     call to8layer(wrf_SH2O,SH2OX,wrf_ix,wrf_jx)

     CMC = WRF_CMC
     T1  = wrf_T1
     WEASD = wrf_WEASD
     SNODEP = wrf_SNODEP
!yw tmp     VEGTYP = ivgtyp
!yw tmp     fpar       = VEGFRA/100.
  endif

! pass forcing
      do i = 1, wrf_ix
        do j = 1, wrf_jx
           IF (XICE(I,J) .GT. 0.5) THEN
              tbot_wrf(i,j)=271.16   ! it is ice
            ELSE
              TBOT_wrf(i,j)=wrf_TMN(I,J)
            ENDIF
        enddo
      enddo


           T2 = wrf_T2
           Q2X = wrf_Q2X
           U = wrf_U
           V = wrf_V
           PRES = wrf_PRES
           XLONG = wrf_XLONG * wrf_EMISS
           SHORT = wrf_SHORT /(1.0 - wrf_albedo)
           PRCP1 = wrf_PRCP1 / cpl_land_dt

           WEASD = wrf_WEASD * 0.001
           SNODEP = wrf_SNODEP
           zlvl_wrf = wrf_zlvl * 0.5 
           z0_wrf = wrf_z0 
           ims = wrf_ims
           jms = wrf_jms
        
        ntime = 1  ! for coupling with wrf
        call time_seconds(time1) 
        call run_rt_land(ntime,cpl_land_dt)
        call time_seconds(time2)
        if(time2 .lt. time1) then
           time2 = 24*3600+ time2
        endif
        write(6,*) "Elapsed time for run_rt_land: ", time2 - time1
! pass back flux and state variable



        t1max = -1
        t1min = 9999
        do j = 1, wrf_jx
           do i = 1, wrf_ix
              if(t1(i,j) .gt. -9.9999999E+32 ) then
                 t1max = max(t1max,t1(i,j)) 
                 t1min = min(t1min,t1(i,j)) 
              endif
           end do
        enddo

!       write(6,*) "t1max =",t1max,"t1min=",t1min     
!       write(6,*) "Check variable ...."
!       write(6,*) T1(1,1),HX(1,1),ETAKIN(1,1),QSFC(1,1)
!       write(6,*) SOILHX(1,1),SOILHX(1,1),WEASD(1,1),SNOWC(1,1)
!       write(6,*) SNODEP(1,1),SNODEP(1,1),CMC(1,1),ZNT(1,1)  
!       write(6,*) 
!       write(6,*) T1(5,5),HX(5,5),ETAKIN(5,5),QSFC(5,5)
!       write(6,*) SOILHX(5,5),SOILHX(5,5),WEASD(5,5),SNOWC(5,5)
!       write(6,*) SNODEP(5,5),SNODEP(5,5),CMC(5,5),ZNT(5,5)  
!       write(6,*) 
!       write(6,*) T1(10,10),HX(10,10),ETAKIN(10,10),QSFC(10,10)
!       write(6,*) SOILHX(10,10),SOILHX(10,10),WEASD(10,10),SNOWC(10,10)
!       write(6,*) SNODEP(10,10),SNODEP(10,10),CMC(10,10),ZNT(10,10)  

        where(soltyp .ne. 14)  wrf_T1 =  T1       ! TSK
        where(soltyp .ne. 14) wrf_HX =  HX        ! HFX
        where(soltyp .ne. 14) wrf_ETAKIN = ETAKIN    ! QFX
        where(soltyp .ne. 14) wrf_QSFC =  QSFC   
        where(soltyp .ne. 14) wrf_SOILHX =  SOILHX   !GRDFLX
        where(soltyp .ne. 14) wrf_WEASD =  WEASD     ! SNOW, & ! WEASD, & ?
        where(soltyp .ne. 14) wrf_SNOWC = SNOWC 
        where(soltyp .ne. 14) wrf_SNODEP =  SNODEP    ! SNOWH
        where(soltyp .ne. 14) wrf_CMC =  CMC       ! CANWAT
        where(soltyp .ne. 14) wrf_ZNT =  ZNT 

#ifdef COUPLED
        cpl_land = .false.
        time_step_read_rstart = .false.
        time_step_write_rstart = .false.
        time_step_output = .false. 
#endif

! add for update the wrf state variable.
     ! 3 d variable
    call to4layer(STC,TSLB,wrf_ix,wrf_jx,soltyp)
    call to4layer(SMC,SMOIS,wrf_ix,wrf_jx,soltyp)
    call to4layer(SH2OX,wrf_SH2O,wrf_ix,wrf_jx,soltyp)

!    SMSTAV = SOILW_yw   !diagnoistics
!    SMSTOT = SOILM_yw   !diagnoistics

!*** SET ZERO-VALUE FOR SOME OUTPUT DIAGNOSTIC ARRAYS
     do j = 1, wrf_jx
        do i = 1,wrf_ix 
           IF((XLAND(I,J)-1.5).GE.0.)THEN
          !***   Open Water Case
!              SMSTAV(I,J)=1.0
!              SMSTOT(I,J)=1.0
               SMOIS(I,:,J)=1.0
               TSLB(I,:,J)=273.16                                          !STEMP
           else
             IF(XICE(I,J).EQ.1.)THEN
   !***        SEA-ICE CASE
!                SMSTAV(I,J)=1.0
!                SMSTOT(I,J)=1.0
                 SMOIS(I,:,J)=1.0
              endif
           endif
        enddo
     enddo

    where(soltyp .ne. 14) LH = LH_yw
    where(soltyp .ne. 14) wrf_ALBEDO = ALBEDX 

!?   CHS2 and CQS2
    CHS2 = CQS2
   
     return 
     end

     subroutine to4layer(in,out,ix,jx,soltyp)
! ZSOIL8(1) = -0.10
! ZSOIL8(2) = -0.40
! ZSOIL8(3) = -0.70
! ZSOIL8(4) = -1.00
! ZSOIL8(5) = -1.30
! ZSOIL8(6) = -1.60
! ZSOIL8(7) = -1.90
! ZSOIL8(8) = -2.00

! ZSOIL(1) = -0.10
! ZSOIL(2) = -0.40
! ZSOIL(3) = -1.00
! ZSOIL(4) = -2.00

     integer ix,jx
     real in(ix,jx,8),out(ix,4,jx) 
     integer i,j,k, soltyp(ix,jx)
     where(soltyp .ne. 14) out(:,1,:) = in(:,:,1)
     where(soltyp .ne. 14) out(:,2,:) = in(:,:,2)
     where(soltyp .ne. 14) out(:,3,:) = in(:,:,3)*0.25 + in(:,:,5)*0.25 + in(:,:,4)*0.5
     where(soltyp .ne. 14) out(:,4,:) = in(:,:,6)*0.1 + in(:,:,7)*0.4 + in(:,:,8)*0.5
     return
     end 

     subroutine to8layer(in,out,ix,jx)
! ZSOIL8(1) = -0.10
! ZSOIL8(2) = -0.40
! ZSOIL8(3) = -0.70
! ZSOIL8(4) = -1.00
! ZSOIL8(5) = -1.30
! ZSOIL8(6) = -1.60
! ZSOIL8(7) = -1.90
! ZSOIL8(8) = -2.00

! ZSOIL(1) = -0.10
! ZSOIL(2) = -0.40
! ZSOIL(3) = -1.00
! ZSOIL(4) = -2.00

     integer ix,jx
     real out(ix,jx,8),in(ix,4,jx) 
     integer i,j,k, soltyp(ix,jx)
     out(:,:,1) = in(:,1,:)
     out(:,:,2) = in(:,2,:)
     out(:,:,3) = in(:,2,:)*0.5 + in(:,3,:)*0.5
     out(:,:,4) = in(:,3,:)
     out(:,:,5) = in(:,3,:)*0.7+ in(:,4,:)*0.3
     out(:,:,6) = in(:,3,:)*0.4+ in(:,4,:)*0.6
     out(:,:,7) = in(:,3,:)*0.1+ in(:,4,:)*0.9
     out(:,:,8) = in(:,4,:)
     return
     end 

     subroutine time_seconds2(i3)
          integer time_array(8),i3
          call date_and_time(values=time_array)
          i3 = time_array(5) * 3600 + time_array(6) * 60 + &
                time_array(7) + 0.001 * time_array(8)
      return
      end
