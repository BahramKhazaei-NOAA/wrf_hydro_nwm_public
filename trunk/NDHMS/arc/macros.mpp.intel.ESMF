# ################################
# Resolve LIS Makefile Definitions
# ################################

## If you have multiple mpi biulds on a single machine
## this example may be relevant to you. 
## Ex: The hydro-c1 machine has mpi and netcdf built against portland 
##     fortran in the PATH. However mpi and netcd built against intel 
##     fortran is also available. Here's how I build WRF HYDRO against 
##     intel
##     Below, in this file, I make the changes:
##       COMPILER90 = $(ifortCompiler90)
##       LDFLAGS    = $(ifortLdFlags)
##       NETCDFINC  = $(ifortNetcdfInc)
##       NETCDFLIB  = -L$(ifortNetcdfLib) -lnetcdff -lnetcdf
##     In my ~/.bashrc I have
##       ## WRF HYDRO
##       export NETCDF=/opt/netcdf
##       export WRF_HYDRO=1
##       export HYDRO_D=1
##       ### manage ifort on hydro
##       export ifortNetcdfLib="/opt/netcdf-4.3.0+ifort-12.1/lib/"
##       export ifortNetcdfInc="/opt/netcdf-4.3.0+ifort-12.1/include/"
##       # RPATH for ifort (pgi is already default so no need)
##       ifortMpiLib="/opt/openmpi-1.10.0-intel/lib/"
##       export ifortLdFlags="-Wl,-rpath,${ifortNetcdfLib}:${ifortMpiLib} -L${ifortNetcdfLib} -L${ifortMpiLib}"
##       export ifortCompiler90='/opt/openmpi-1.10.0-intel/bin/mpif90'
##       # Aliases for invoking ifort
##       alias impirun='/opt/openmpi-1.10.0-intel/bin/mpirun'
##       alias iman='man -M/opt/openmpi+intel/man'
##       # Bonus: Check your wrf hydro environment - up you to maintain to your needs.
##       alias henv='printenv | egrep -i "(HYDRO|NUDG|PRECIP|CHAN_CONN|^NETCDF|^LDFLAGS|^ifort)" | egrep -v PWD'

.IGNORE:

ESMF_TRACE = 1
WRFIO_NCD_LARGE_FILE_SUPPORT = 1
WRF_HYDRO_NUDGING = 0
SPATIAL_SOIL = 0

# ################################
# Resolve NETCDF Library Locations
# ################################

ifneq ($(strip $(NETCDF_DIR)),)
 NETCDF = $(NETCDF_DIR)
endif

ifeq  ($(strip $(NETCDF_LIBDIR)),)
ifneq ($(strip $(NETCDF)),)
 NETCDF_LIBDIR = $(NETCDF)/lib
else
 $(error Cannot resolve NETCDF_LIBDIR.)
endif
endif

ifeq  ($(strip $(NETCDF_LIB)),)
ifneq ($(strip $(NETCDF_LIBDIR)),)
 NETCDF_LIB = $(NETCDF_LIBDIR)/libnetcdf.a
else
 $(error Cannot resolve NETCDF_LIB.)
endif
endif

ifeq  ($(strip $(NETCDF_LIBF)),)
ifneq ($(strip $(NETCDF_LIBDIR)),)
 NETCDF_LIBF = $(NETCDF_LIBDIR)/libnetcdff.a
else
 $(error Cannot resolve NETCDF_LIBF.)
endif
endif

ifeq  ($(strip $(NETCDF_INCDIR)),)
ifneq ($(strip $(NETCDF)),)
 NETCDF_INCDIR = $(NETCDF)/include
else
 $(error Cannot resolve NETCDF_INCDIR.)
endif
endif

ifeq ("$(wildcard $(NETCDF_LIBDIR))","")
 $(error Cannot find $(NETCDF_LIBDIR).)
endif

ifeq ("$(wildcard $(NETCDF_LIB))","")
 $(error Cannot find $(NETCDF_LIB).)
endif

ifeq ("$(wildcard $(NETCDF_LIBF))","")
 $(error Cannot find $(NETCDF_LIBF).)
endif

ifeq ("$(wildcard $(NETCDF_INCDIR))","")
 $(error Cannot find $(NETCDF_INCDIR).)
endif

# ##########################
# Set ESMF Makefile Fragment
# ##########################

ifeq ($(origin ESMFMKFILE), environment)
 include $(ESMFMKFILE)
else
 $(error Environment variable ESMFMKFILE was not set.)
endif

# ##########################
# Resolve WRF-Hydro Settings
# ##########################

ifeq ($(SPATIAL_SOIL),1)
SPATIAL_SOIL = -DSPATIAL_SOIL
else
SPATIAL_SOIL = 
endif

ifeq ($(HYDRO_REALTIME),1)
HYDRO_REALTIME = -DHYDRO_REALTIME
else
HYDRO_REALTIME =
endif

ifeq ($(WRF_HYDRO),1)
WRF_HYDRO = -DWRF_HYDRO $(HYDRO_REALTIME)
else
WRF_HYDRO =
endif

ifeq ($(WRF_HYDRO_RAPID),1)
WRF_HYDRO = -DWRF_HYDRO -DWRF_HYDRO_RAPID $(HYDRO_REALTIME)
endif

ifeq ($(HYDRO_D),1)
HYDRO_D = -DHYDRO_D $(WRF_HYDRO)
else
HYDRO_D =  $(WRF_HYDRO)
endif

ifeq ($(WRFIO_NCD_LARGE_FILE_SUPPORT),1)
WRFIO_NCD_LARGE_FILE_SUPPORT = -DWRFIO_NCD_LARGE_FILE_SUPPORT
else
WRFIO_NCD_LARGE_FILE_SUPPORT = 
endif

ifeq ($(WRF_HYDRO_NUDGING),1)
WRF_HYDRO_NUDGING = -DWRF_HYDRO_NUDGING
else
WRF_HYDRO_NUDGING = 
endif

ifeq ($(OUTPUT_CHAN_CONN),1)
OUTPUT_CHAN_CONN = -DOUTPUT_CHAN_CONN
else
OUTPUT_CHAN_CONN = 
endif

ifeq ($(PRECIP_DOUBLE),1)
PRECIP_DOUBLE = -DPRECIP_DOUBLE
else
PRECIP_DOUBLE = 
endif

ifeq ($(ESMF_TRACE),1)
ifneq ($(origin ESMFMKFILE), environment)
$(error To use ESMF tracing, set ESMFMKFILE environment variable to location of esmf.mk in ESMF installation.)
endif
ESMF_TRACE   = -DESMF_TRACE
else
ESMF_TRACE   =
endif

RMD	    = rm -f
COMPILER90  = $(ESMF_F90COMPILER)
CPP         = cpp
FORMAT_FREE = -FR
BYTESWAPIO  = -convert big_endian

ifeq ($(BOPT),g)
 F90FLAGS   = -w -c -g -O0 -ftz -align all -fno-alias -fp-model precise 
 F90FLAGS  += $(FORMAT_FREE) $(BYTESWAPIO)
else
 F90FLAGS   = -w -c -ftz -align all -fno-alias -fp-model precise 
 F90FLAGS  += $(FORMAT_FREE) $(BYTESWAPIO)
endif

MODFLAG	    = -I./ -I ../../MPP -I ../MPP -I ../mod $(ESMF_F90COMPILEPATHS)
LDFLAGS	    =
CPPFLAGS    = -P -traditional -nostdinc -DMPP_LAND -I ../Data_Rec $(HYDRO_D) 
CPPFLAGS   += $(SPATIAL_SOIL) $(WRFIO_NCD_LARGE_FILE_SUPPORT) 
CPPFLAGS   += $(WRF_HYDRO_NUDGING) $(OUTPUT_CHAN_CONN) $(PRECIP_DOUBLE) 
CPPFLAGS   += $(ESMF_TRACE)
LIBS 	    = $(ESMF_F90LINKPATHS) $(ESMF_F90LINKRPATHS) $(ESMF_F90ESMFLINKLIBS)
NETCDFINC   = $(NETCDF_INCDIR)
NETCDFLIB   = -L$(NETCDF_LIBDIR) -lnetcdff -lnetcdf

ifeq ($(BOPT),g)
 override ESMF_F90COMPILEOPTS     += -g -O0
 override ESMF_CXXCOMPILEOPTS     += -g -O0
 override ESMF_F90COMPILECPPFLAGS += -DDEBUG
 override ESMF_CXXCOMPILECPPFLAGS += -DDEBUG
endif

